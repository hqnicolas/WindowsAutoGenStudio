{"name":"Youtube Video Transcript With Group Chat","description":"Youtube Video Transcript With Group Chat doesnt work","sender":{"type":"userproxy","config":{"name":"userproxy","llm_config":false,"human_input_mode":"NEVER","max_consecutive_auto_reply":5,"system_message":"You are a helpful assistant.","is_termination_msg":null,"code_execution_config":{"work_dir":null,"use_docker":false},"default_auto_reply":"TERMINATE","description":null},"timestamp":"2024-04-10T14:52:57.165383","user_id":"default","skills":null},"receiver":{"type":"groupchat","config":{"name":"groupchat_assistant","llm_config":{"config_list":[{"user_id":"guestuser@gmail.com","timestamp":"2024-03-31T15:46:23.961366","model":"openchat:7b-v3.5-1210-q5_K_M","base_url":"https://server.ollama.ia/v1","api_type":"openai","api_version":"","description":"OpenAI GPT-3.5 v1210"}],"temperature":0.1,"cache_seed":null,"timeout":null,"max_tokens":null,"extra_body":null},"human_input_mode":"NEVER","max_consecutive_auto_reply":8,"system_message":"You are a helpful assistant skilled at cordinating a group of other assistants to solve a task. The task is to takes a youtube URL, having an agent that from skills import fetch_youtube_transcript, and, import youtube_transcript_api to get the transcript from the video and then a content writer agent creates a blog post from that transcript. When you have the blog post, verify if the answer is correct. if everything is done reply 'TERMINATE' in the end when everything is done.","is_termination_msg":null,"code_execution_config":false,"default_auto_reply":"","description":null},"groupchat_config":{"agents":[{"type":"userproxy","config":{"name":"userproxy","llm_config":false,"human_input_mode":"NEVER","max_consecutive_auto_reply":5,"system_message":"You are a helpful assistant.","is_termination_msg":null,"code_execution_config":{"work_dir":null,"use_docker":false},"default_auto_reply":"TERMINATE","description":"A user proxy agent that executes code."},"timestamp":"2024-04-10T15:24:50.893865","user_id":"default","skills":null},{"type":"assistant","config":{"name":"content_writer","llm_config":{"config_list":[{"user_id":"guestuser@gmail.com","timestamp":"2024-04-10T15:06:20.178Z","model":"mistral-openorca:7b-q6_K","base_url":"https://server.ollama.ia/v1","api_type":"openai","api_version":null,"description":"General use mistral openorca 7b q6 K"}],"temperature":0.1,"cache_seed":null,"timeout":null,"max_tokens":null,"extra_body":null},"human_input_mode":"NEVER","max_consecutive_auto_reply":4,"system_message":"you are an insightful, intelligent, and witty content writer who is able to take raw youtube video transcripts and turn them into blog posts and tweet threads.","is_termination_msg":null,"code_execution_config":false,"default_auto_reply":"","description":"Takes raw youtube video transcripts and converts it into blog posts and tweet threads."},"timestamp":"2024-04-10T12:50:50.940324","user_id":"guestuser@gmail.com","skills":[]},{"type":"assistant","config":{"name":"transcript_getter","llm_config":{"config_list":[{"user_id":"guestuser@gmail.com","timestamp":"2024-04-10T15:06:20.178Z","model":"mistral-openorca:7b-q6_K","base_url":"https://server.ollama.ia/v1","api_type":"openai","api_version":null,"description":"General use mistral openorca 7b q6 K"}],"temperature":0.1,"cache_seed":null,"timeout":null,"max_tokens":null,"extra_body":null},"human_input_mode":"NEVER","max_consecutive_auto_reply":5,"system_message":"You are a helpful AI assistant that already have everything installed. You from skills import fetch_youtube_transcript to grab an youtube transcription from URL and send it to the subsequent processing.","is_termination_msg":null,"code_execution_config":false,"default_auto_reply":"","description":"Takes a youtube URL and gets the transcript from a video"},"timestamp":"2024-04-10T12:48:18.295558","user_id":"guestuser@gmail.com","skills":[{"title":"fetch_youtube_transcript","content":"# Python code to fetch YouTube transcript\nfrom typing import Optional\nfrom youtube_transcript_api import YouTubeTranscriptApi\n\ndef fetch_youtube_transcript(url: str) -> Optional[str]:\n    \"\"\"\n    Fetches the transcript of a YouTube video.\n\n    Given a URL of a YouTube video, this function uses the youtube-transcript-api\n    library to fetch the transcript of the video.\n\n    Args:\n        url (str): The URL of the YouTube video.\n\n    Returns:\n        Optional[str]: The transcript of the video, or None if no transcript is found or an error occurs.\n    \"\"\"\n    try:\n        # Extract the video ID from the URL\n        video_id = url.split(\"v=\")[1].split(\"&\")[0]\n        # Fetch the transcript using the YouTubeTranscriptApi\n        transcript_list = YouTubeTranscriptApi.get_transcript(video_id)\n        # Concatenate all text elements in the transcript\n        transcript = \" \".join([item['text'] for item in transcript_list])\n        return transcript\n    except Exception as e:\n        # Return None if any other exception is caught\n        return video_id\n","file_name":null,"description":null,"timestamp":"2024-04-10T12:45:17.300591","user_id":"default"}]}],"admin_name":"groupchat_assistant","messages":[],"max_round":10,"speaker_selection_method":"auto","allow_repeat_speaker":false},"timestamp":"2024-04-10T14:52:57.165383","user_id":"default","skills":[{"title":"fetch_youtube_transcript","content":"# Python code to fetch YouTube transcript\nfrom typing import Optional\nfrom youtube_transcript_api import YouTubeTranscriptApi\n\ndef fetch_youtube_transcript(url: str) -> Optional[str]:\n    \"\"\"\n    Fetches the transcript of a YouTube video.\n\n    Given a URL of a YouTube video, this function uses the youtube-transcript-api\n    library to fetch the transcript of the video.\n\n    Args:\n        url (str): The URL of the YouTube video.\n\n    Returns:\n        Optional[str]: The transcript of the video, or None if no transcript is found or an error occurs.\n    \"\"\"\n    try:\n        # Extract the video ID from the URL\n        video_id = url.split(\"v=\")[1].split(\"&\")[0]\n        # Fetch the transcript using the YouTubeTranscriptApi\n        transcript_list = YouTubeTranscriptApi.get_transcript(video_id)\n        # Concatenate all text elements in the transcript\n        transcript = \" \".join([item['text'] for item in transcript_list])\n        return transcript\n    except Exception as e:\n        # Return None if any other exception is caught\n        return video_id\n","file_name":null,"description":null,"timestamp":"2024-04-10T12:45:17.300591","user_id":"default"}]},"type":"groupchat","user_id":"default","timestamp":"2024-04-10T14:52:57.166381","summary_method":"last"}